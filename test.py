import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
from modelo import treinar_modelo
from agent import buscar_informacoes_complementares

@st.cache_resource
def carregar_modelo():
    return treinar_modelo()

pipeline = carregar_modelo()

# Confiura√ß√£o inicial da aplica√ß√£o
st.set_page_config(
    page_title='Analytics',
    page_icon='üìä',
    layout='wide'
)

# Navega√ß√£o da Aplica√ß√£o
with st.sidebar:
    option = option_menu(
        menu_title="Navega√ß√£o",
        options=["Home", "Dashboard", "Modelo Preditivo"],
        icons=["house", "bar-chart", "graph-up-arrow"],
        menu_icon="card-list",
        default_index=0
    )

if option == 'Home':
    st.title('Comece por aqui')

elif option == 'Modelo Preditivo':
    # Interface com Streamlit
    st.title("Modelo Preditivo")

    col1, col2 = st.columns(2)

    with col1:
        genero = st.selectbox("G√™nero", ["Masculino", "Feminino"])
        peso = st.number_input("Peso (kg)", min_value=30.0, max_value=500.0, value=70.0)
        historico_familiar = st.selectbox("Hist√≥rico familiar de obesidade", ["Sim", "N√£o"])
        favc = st.selectbox("Consome alimentos cal√≥ricos com frequ√™ncia?", ["Sim", "N√£o"])
        caec = st.selectbox("Come entre as refei√ß√µes?", ["√Äs vezes", "Frequentemente", "Sempre", "N√£o"])
    with col2:
        scc = st.selectbox("Monitora calorias?", ["Sim", "N√£o"])
        faf = st.slider("Frequ√™ncia de atividade f√≠sica", 0.0, 3.0, 1.0)
        calc = st.selectbox("Frequ√™ncia de √°lcool", ["√Äs vezes", "Frequentemente", "Sempre", "N√£o"])
        mtrans = st.selectbox("Meio de transporte", ["Transporte P√∫blico", "Andando", "Autom√≥vel", "Motocicleta", "Bicicleta"])

    # Predi√ß√£o
    if st.button("Prever n√≠vel de obesidade"):
        entrada = pd.DataFrame([{
            'Genero': genero,
            'Peso': peso,
            'Historico_Familiar': historico_familiar,
            'FAVC': favc,
            'CAEC': caec,
            'SCC': scc,
            'FAF': faf,
            'CALC': calc,
            'MTRANS': mtrans
        }])
        
        resultado = pipeline.predict(entrada)
        mensagem = {
            "Peso Insuficiente": "Voc√™ est√° abaixo do peso ideal. √â importante buscar orienta√ß√£o m√©dica e nutricional para avaliar sua sa√∫de geral.",
            "Peso Normal": "Parab√©ns! Seu peso est√° dentro da faixa considerada saud√°vel. Continue mantendo bons h√°bitos!",
            "Sobrepeso N√≠vel I": "Voc√™ est√° no primeiro n√≠vel de sobrepeso. Reavaliar h√°bitos alimentares e atividades f√≠sicas pode ajudar a voltar ao peso ideal.",
            "Sobrepeso N√≠vel II": "Voc√™ est√° no segundo n√≠vel de sobrepeso. Mudan√ßas nos h√°bitos e acompanhamento profissional s√£o recomendados.",
            "Obesidade Grau I": "Voc√™ est√° com obesidade tipo I. √â essencial adotar mudan√ßas no estilo de vida e buscar acompanhamento profissional.",
            "Obesidade Grau II": "Voc√™ est√° com obesidade tipo II. Isso pode trazer riscos √† sa√∫de. Acompanhamento m√©dico e nutricional s√£o fortemente recomendados.",
            "Obesidade Grau III": "Voc√™ est√° com obesidade tipo III (grave). Essa condi√ß√£o demanda aten√ß√£o m√©dica imediata."
        }

        nivel = resultado[0]
        st.success(f"N√≠vel de obesidade previsto: **{nivel}**")
        st.info(mensagem.get(nivel, "Informa√ß√£o n√£o dispon√≠vel para este n√≠vel."))